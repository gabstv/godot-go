package godot

import (
	"github.com/gabstv/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// ARVRServerRotationMode is an enum for RotationMode values.
type ARVRServerRotationMode int

const (
	ARVRServerDontResetRotation ARVRServerRotationMode = 2
	ARVRServerResetButKeepTilt  ARVRServerRotationMode = 1
	ARVRServerResetFullRotation ARVRServerRotationMode = 0
)

// ARVRServerTrackerType is an enum for TrackerType values.
type ARVRServerTrackerType int

const (
	ARVRServerTrackerAnchor      ARVRServerTrackerType = 4
	ARVRServerTrackerAny         ARVRServerTrackerType = 255
	ARVRServerTrackerAnyKnown    ARVRServerTrackerType = 127
	ARVRServerTrackerBasestation ARVRServerTrackerType = 2
	ARVRServerTrackerController  ARVRServerTrackerType = 1
	ARVRServerTrackerUnknown     ARVRServerTrackerType = 128
)

//func NewarvrServerFromPointer(ptr gdnative.Pointer) arvrServer {
func newARVRServerFromPointer(ptr gdnative.Pointer) arvrServer {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := arvrServer{}
	obj.SetBaseObject(owner)

	return obj
}

func newSingletonARVRServer() *arvrServer {
	return &arvrServer{}
}

/*
   Undocumented
*/
var ARVRServer = newSingletonARVRServer()

/*
Undocumented
*/
type arvrServer struct {
	Object
	owner       gdnative.Object
	initialized bool
}

// EnsureSingleton will check to see if we have an object for it. If not, it will fetch its
// GDNative object and set it.
func (o *arvrServer) ensureSingleton() {
	if o.initialized == true {
		return
	}
	//log.Println("Singleton not found. Fetching from GDNative...")
	base := gdnative.GetSingleton("ARVRServer")
	o.SetBaseObject(base)
	o.initialized = true
}

func (o *arvrServer) BaseClass() string {
	return "ARVRServer"
}

/*
        Undocumented
	Args: [{ false rotation_mode int} { false keep_height bool}], Returns: void
*/
func (o *arvrServer) CenterOnHmd(rotationMode gdnative.Int, keepHeight gdnative.Bool) {
	o.ensureSingleton()
	//log.Println("Calling ARVRServer.CenterOnHmd()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(rotationMode)
	ptrArguments[1] = gdnative.NewPointerFromBool(keepHeight)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRServer", "center_on_hmd")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false name String}], Returns: ARVRInterface
*/
func (o *arvrServer) FindInterface(name gdnative.String) ARVRInterfaceImplementer {
	o.ensureSingleton()
	//log.Println("Calling ARVRServer.FindInterface()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRServer", "find_interface")

	// Call the parent method.
	// ARVRInterface
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newARVRInterfaceFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(ARVRInterfaceImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "ARVRInterface" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(ARVRInterfaceImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: Transform
*/
func (o *arvrServer) GetHmdTransform() gdnative.Transform {
	o.ensureSingleton()
	//log.Println("Calling ARVRServer.GetHmdTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRServer", "get_hmd_transform")

	// Call the parent method.
	// Transform
	retPtr := gdnative.NewEmptyTransform()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransformFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false idx int}], Returns: ARVRInterface
*/
func (o *arvrServer) GetInterface(idx gdnative.Int) ARVRInterfaceImplementer {
	o.ensureSingleton()
	//log.Println("Calling ARVRServer.GetInterface()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRServer", "get_interface")

	// Call the parent method.
	// ARVRInterface
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newARVRInterfaceFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(ARVRInterfaceImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "ARVRInterface" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(ARVRInterfaceImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *arvrServer) GetInterfaceCount() gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling ARVRServer.GetInterfaceCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRServer", "get_interface_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Array
*/
func (o *arvrServer) GetInterfaces() gdnative.Array {
	o.ensureSingleton()
	//log.Println("Calling ARVRServer.GetInterfaces()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRServer", "get_interfaces")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *arvrServer) GetLastCommitUsec() gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling ARVRServer.GetLastCommitUsec()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRServer", "get_last_commit_usec")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *arvrServer) GetLastFrameUsec() gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling ARVRServer.GetLastFrameUsec()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRServer", "get_last_frame_usec")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *arvrServer) GetLastProcessUsec() gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling ARVRServer.GetLastProcessUsec()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRServer", "get_last_process_usec")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: ARVRInterface
*/
func (o *arvrServer) GetPrimaryInterface() ARVRInterfaceImplementer {
	o.ensureSingleton()
	//log.Println("Calling ARVRServer.GetPrimaryInterface()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRServer", "get_primary_interface")

	// Call the parent method.
	// ARVRInterface
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newARVRInterfaceFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(ARVRInterfaceImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "ARVRInterface" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(ARVRInterfaceImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: Transform
*/
func (o *arvrServer) GetReferenceFrame() gdnative.Transform {
	o.ensureSingleton()
	//log.Println("Calling ARVRServer.GetReferenceFrame()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRServer", "get_reference_frame")

	// Call the parent method.
	// Transform
	retPtr := gdnative.NewEmptyTransform()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransformFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false idx int}], Returns: ARVRPositionalTracker
*/
func (o *arvrServer) GetTracker(idx gdnative.Int) ARVRPositionalTrackerImplementer {
	o.ensureSingleton()
	//log.Println("Calling ARVRServer.GetTracker()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRServer", "get_tracker")

	// Call the parent method.
	// ARVRPositionalTracker
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newARVRPositionalTrackerFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(ARVRPositionalTrackerImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "ARVRPositionalTracker" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(ARVRPositionalTrackerImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *arvrServer) GetTrackerCount() gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling ARVRServer.GetTrackerCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRServer", "get_tracker_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *arvrServer) GetWorldScale() gdnative.Real {
	o.ensureSingleton()
	//log.Println("Calling ARVRServer.GetWorldScale()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRServer", "get_world_scale")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false interface ARVRInterface}], Returns: void
*/
func (o *arvrServer) SetPrimaryInterface(intrfce ARVRInterfaceImplementer) {
	o.ensureSingleton()
	//log.Println("Calling ARVRServer.SetPrimaryInterface()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(intrfce.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRServer", "set_primary_interface")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 float}], Returns: void
*/
func (o *arvrServer) SetWorldScale(arg0 gdnative.Real) {
	o.ensureSingleton()
	//log.Println("Calling ARVRServer.SetWorldScale()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(arg0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRServer", "set_world_scale")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// ARVRServerImplementer is an interface that implements the methods
// of the ARVRServer class.
type ARVRServerImplementer interface {
	ObjectImplementer
	CenterOnHmd(rotationMode gdnative.Int, keepHeight gdnative.Bool)
	FindInterface(name gdnative.String) ARVRInterfaceImplementer
	GetHmdTransform() gdnative.Transform
	GetInterface(idx gdnative.Int) ARVRInterfaceImplementer
	GetInterfaceCount() gdnative.Int
	GetInterfaces() gdnative.Array
	GetLastCommitUsec() gdnative.Int
	GetLastFrameUsec() gdnative.Int
	GetLastProcessUsec() gdnative.Int
	GetPrimaryInterface() ARVRInterfaceImplementer
	GetReferenceFrame() gdnative.Transform
	GetTracker(idx gdnative.Int) ARVRPositionalTrackerImplementer
	GetTrackerCount() gdnative.Int
	GetWorldScale() gdnative.Real
	SetPrimaryInterface(intrfce ARVRInterfaceImplementer)
	SetWorldScale(arg0 gdnative.Real)
}
