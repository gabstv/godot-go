package godot

import (
	"github.com/gabstv/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewInputEventMouseMotionFromPointer(ptr gdnative.Pointer) InputEventMouseMotion {
func newInputEventMouseMotionFromPointer(ptr gdnative.Pointer) InputEventMouseMotion {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := InputEventMouseMotion{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Contains mouse and pen motion information. Supports relative, absolute positions and speed. See [method Node._input]. [b]Note:[/b] By default, this event is only emitted once per frame rendered at most. If you need more precise input reporting, call [method Input.set_use_accumulated_input] with [code]false[/code] to make events emitted as often as possible. If you use InputEventMouseMotion to draw lines, consider implementing [url=https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm]Bresenham's line algorithm[/url] as well to avoid visible gaps in lines if the user is moving the mouse quickly.
*/
type InputEventMouseMotion struct {
	InputEventMouse
	owner gdnative.Object
}

func (o *InputEventMouseMotion) BaseClass() string {
	return "InputEventMouseMotion"
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *InputEventMouseMotion) GetPressure() gdnative.Real {
	//log.Println("Calling InputEventMouseMotion.GetPressure()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("InputEventMouseMotion", "get_pressure")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Vector2
*/
func (o *InputEventMouseMotion) GetRelative() gdnative.Vector2 {
	//log.Println("Calling InputEventMouseMotion.GetRelative()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("InputEventMouseMotion", "get_relative")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Vector2
*/
func (o *InputEventMouseMotion) GetSpeed() gdnative.Vector2 {
	//log.Println("Calling InputEventMouseMotion.GetSpeed()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("InputEventMouseMotion", "get_speed")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Vector2
*/
func (o *InputEventMouseMotion) GetTilt() gdnative.Vector2 {
	//log.Println("Calling InputEventMouseMotion.GetTilt()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("InputEventMouseMotion", "get_tilt")

	// Call the parent method.
	// Vector2
	retPtr := gdnative.NewEmptyVector2()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector2FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false pressure float}], Returns: void
*/
func (o *InputEventMouseMotion) SetPressure(pressure gdnative.Real) {
	//log.Println("Calling InputEventMouseMotion.SetPressure()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(pressure)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("InputEventMouseMotion", "set_pressure")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false relative Vector2}], Returns: void
*/
func (o *InputEventMouseMotion) SetRelative(relative gdnative.Vector2) {
	//log.Println("Calling InputEventMouseMotion.SetRelative()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector2(relative)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("InputEventMouseMotion", "set_relative")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false speed Vector2}], Returns: void
*/
func (o *InputEventMouseMotion) SetSpeed(speed gdnative.Vector2) {
	//log.Println("Calling InputEventMouseMotion.SetSpeed()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector2(speed)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("InputEventMouseMotion", "set_speed")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false tilt Vector2}], Returns: void
*/
func (o *InputEventMouseMotion) SetTilt(tilt gdnative.Vector2) {
	//log.Println("Calling InputEventMouseMotion.SetTilt()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector2(tilt)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("InputEventMouseMotion", "set_tilt")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// InputEventMouseMotionImplementer is an interface that implements the methods
// of the InputEventMouseMotion class.
type InputEventMouseMotionImplementer interface {
	InputEventMouseImplementer
	GetPressure() gdnative.Real
	GetRelative() gdnative.Vector2
	GetSpeed() gdnative.Vector2
	GetTilt() gdnative.Vector2
	SetPressure(pressure gdnative.Real)
	SetRelative(relative gdnative.Vector2)
	SetSpeed(speed gdnative.Vector2)
	SetTilt(tilt gdnative.Vector2)
}
