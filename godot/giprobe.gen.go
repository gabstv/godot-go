package godot

import (
	"github.com/gabstv/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// GIProbeSubdiv is an enum for Subdiv values.
type GIProbeSubdiv int

const (
	GIProbeSubdiv128 GIProbeSubdiv = 1
	GIProbeSubdiv256 GIProbeSubdiv = 2
	GIProbeSubdiv512 GIProbeSubdiv = 3
	GIProbeSubdiv64  GIProbeSubdiv = 0
	GIProbeSubdivMax GIProbeSubdiv = 4
)

//func NewGIProbeFromPointer(ptr gdnative.Pointer) GIProbe {
func newGIProbeFromPointer(ptr gdnative.Pointer) GIProbe {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := GIProbe{}
	obj.SetBaseObject(owner)

	return obj
}

/*
[GIProbe]s are used to provide high-quality real-time indirect light to scenes. They precompute the effect of objects that emit light and the effect of static geometry to simulate the behavior of complex light in real-time. [GIProbe]s need to be baked before using, however, once baked, dynamic objects will receive light from them. Further, lights can be fully dynamic or baked. Having [GIProbe]s in a scene can be expensive, the quality of the probe can be turned down in exchange for better performance in the [ProjectSettings] using [member ProjectSettings.rendering/quality/gi_probes/quality].
*/
type GIProbe struct {
	VisualInstance
	owner gdnative.Object
}

func (o *GIProbe) BaseClass() string {
	return "GIProbe"
}

/*
        Bakes the effect from all [GeometryInstance3D]s marked with [constant GeometryInstance3D.GI_MODE_BAKED] and [Light3D]s marked with either [constant Light3D.BAKE_DYNAMIC] or [constant Light3D.BAKE_STATIC]. If [code]create_visual_debug[/code] is [code]true[/code], after baking the light, this will generate a [MultiMesh] that has a cube representing each solid cell with each cube colored to the cell's albedo color. This can be used to visualize the [GIProbe]'s data and debug any issues that may be occurring.
	Args: [{Null true from_node Node} {False true create_visual_debug bool}], Returns: void
*/
func (o *GIProbe) Bake(fromNode NodeImplementer, createVisualDebug gdnative.Bool) {
	//log.Println("Calling GIProbe.Bake()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromObject(fromNode.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromBool(createVisualDebug)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GIProbe", "bake")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Calls [method bake] with [code]create_visual_debug[/code] enabled.
	Args: [], Returns: void
*/
func (o *GIProbe) DebugBake() {
	//log.Println("Calling GIProbe.DebugBake()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GIProbe", "debug_bake")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *GIProbe) GetBias() gdnative.Real {
	//log.Println("Calling GIProbe.GetBias()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GIProbe", "get_bias")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *GIProbe) GetDynamicRange() gdnative.Int {
	//log.Println("Calling GIProbe.GetDynamicRange()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GIProbe", "get_dynamic_range")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *GIProbe) GetEnergy() gdnative.Real {
	//log.Println("Calling GIProbe.GetEnergy()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GIProbe", "get_energy")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Vector3
*/
func (o *GIProbe) GetExtents() gdnative.Vector3 {
	//log.Println("Calling GIProbe.GetExtents()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GIProbe", "get_extents")

	// Call the parent method.
	// Vector3
	retPtr := gdnative.NewEmptyVector3()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector3FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *GIProbe) GetNormalBias() gdnative.Real {
	//log.Println("Calling GIProbe.GetNormalBias()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GIProbe", "get_normal_bias")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: GIProbeData
*/
func (o *GIProbe) GetProbeData() GIProbeDataImplementer {
	//log.Println("Calling GIProbe.GetProbeData()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GIProbe", "get_probe_data")

	// Call the parent method.
	// GIProbeData
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newGIProbeDataFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(GIProbeDataImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "GIProbeData" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(GIProbeDataImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *GIProbe) GetPropagation() gdnative.Real {
	//log.Println("Calling GIProbe.GetPropagation()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GIProbe", "get_propagation")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: enum.GIProbe::Subdiv
*/
func (o *GIProbe) GetSubdiv() GIProbeSubdiv {
	//log.Println("Calling GIProbe.GetSubdiv()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GIProbe", "get_subdiv")

	// Call the parent method.
	// enum.GIProbe::Subdiv
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return GIProbeSubdiv(ret)
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *GIProbe) IsCompressed() gdnative.Bool {
	//log.Println("Calling GIProbe.IsCompressed()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GIProbe", "is_compressed")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *GIProbe) IsInterior() gdnative.Bool {
	//log.Println("Calling GIProbe.IsInterior()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GIProbe", "is_interior")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false max float}], Returns: void
*/
func (o *GIProbe) SetBias(max gdnative.Real) {
	//log.Println("Calling GIProbe.SetBias()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(max)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GIProbe", "set_bias")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *GIProbe) SetCompress(enable gdnative.Bool) {
	//log.Println("Calling GIProbe.SetCompress()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GIProbe", "set_compress")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false max int}], Returns: void
*/
func (o *GIProbe) SetDynamicRange(max gdnative.Int) {
	//log.Println("Calling GIProbe.SetDynamicRange()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(max)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GIProbe", "set_dynamic_range")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false max float}], Returns: void
*/
func (o *GIProbe) SetEnergy(max gdnative.Real) {
	//log.Println("Calling GIProbe.SetEnergy()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(max)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GIProbe", "set_energy")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false extents Vector3}], Returns: void
*/
func (o *GIProbe) SetExtents(extents gdnative.Vector3) {
	//log.Println("Calling GIProbe.SetExtents()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector3(extents)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GIProbe", "set_extents")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *GIProbe) SetInterior(enable gdnative.Bool) {
	//log.Println("Calling GIProbe.SetInterior()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GIProbe", "set_interior")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false max float}], Returns: void
*/
func (o *GIProbe) SetNormalBias(max gdnative.Real) {
	//log.Println("Calling GIProbe.SetNormalBias()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(max)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GIProbe", "set_normal_bias")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false data GIProbeData}], Returns: void
*/
func (o *GIProbe) SetProbeData(data GIProbeDataImplementer) {
	//log.Println("Calling GIProbe.SetProbeData()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(data.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GIProbe", "set_probe_data")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false max float}], Returns: void
*/
func (o *GIProbe) SetPropagation(max gdnative.Real) {
	//log.Println("Calling GIProbe.SetPropagation()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(max)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GIProbe", "set_propagation")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false subdiv int}], Returns: void
*/
func (o *GIProbe) SetSubdiv(subdiv gdnative.Int) {
	//log.Println("Calling GIProbe.SetSubdiv()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(subdiv)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("GIProbe", "set_subdiv")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// GIProbeImplementer is an interface that implements the methods
// of the GIProbe class.
type GIProbeImplementer interface {
	VisualInstanceImplementer
	Bake(fromNode NodeImplementer, createVisualDebug gdnative.Bool)
	DebugBake()
	GetBias() gdnative.Real
	GetDynamicRange() gdnative.Int
	GetEnergy() gdnative.Real
	GetExtents() gdnative.Vector3
	GetNormalBias() gdnative.Real
	GetProbeData() GIProbeDataImplementer
	GetPropagation() gdnative.Real
	IsCompressed() gdnative.Bool
	IsInterior() gdnative.Bool
	SetBias(max gdnative.Real)
	SetCompress(enable gdnative.Bool)
	SetDynamicRange(max gdnative.Int)
	SetEnergy(max gdnative.Real)
	SetExtents(extents gdnative.Vector3)
	SetInterior(enable gdnative.Bool)
	SetNormalBias(max gdnative.Real)
	SetProbeData(data GIProbeDataImplementer)
	SetPropagation(max gdnative.Real)
	SetSubdiv(subdiv gdnative.Int)
}
