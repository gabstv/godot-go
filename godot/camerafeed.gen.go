package godot

import (
	"github.com/gabstv/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// CameraFeedFeedDataType is an enum for FeedDataType values.
type CameraFeedFeedDataType int

const (
	CameraFeedFeedNoimage  CameraFeedFeedDataType = 0
	CameraFeedFeedRgb      CameraFeedFeedDataType = 1
	CameraFeedFeedYcbcr    CameraFeedFeedDataType = 2
	CameraFeedFeedYcbcrSep CameraFeedFeedDataType = 3
)

// CameraFeedFeedPosition is an enum for FeedPosition values.
type CameraFeedFeedPosition int

const (
	CameraFeedFeedBack        CameraFeedFeedPosition = 2
	CameraFeedFeedFront       CameraFeedFeedPosition = 1
	CameraFeedFeedUnspecified CameraFeedFeedPosition = 0
)

//func NewCameraFeedFromPointer(ptr gdnative.Pointer) CameraFeed {
func newCameraFeedFromPointer(ptr gdnative.Pointer) CameraFeed {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := CameraFeed{}
	obj.SetBaseObject(owner)

	return obj
}

/*
A camera feed gives you access to a single physical camera attached to your device. When enabled, Godot will start capturing frames from the camera which can then be used. See also [CameraServer]. [b]Note:[/b] Many cameras will return YCbCr images which are split into two textures and need to be combined in a shader. Godot does this automatically for you if you set the environment to show the camera image in the background.
*/
type CameraFeed struct {
	Reference
	owner gdnative.Object
}

func (o *CameraFeed) BaseClass() string {
	return "CameraFeed"
}

/*
        Undocumented
	Args: [{ false width int} { false height int} { false format int} { false texture_type int} { false data_type int}], Returns: void
*/
func (o *CameraFeed) X_AllocateTexture(width gdnative.Int, height gdnative.Int, format gdnative.Int, textureType gdnative.Int, dataType gdnative.Int) {
	//log.Println("Calling CameraFeed.X_AllocateTexture()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 5, 5)
	ptrArguments[0] = gdnative.NewPointerFromInt(width)
	ptrArguments[1] = gdnative.NewPointerFromInt(height)
	ptrArguments[2] = gdnative.NewPointerFromInt(format)
	ptrArguments[3] = gdnative.NewPointerFromInt(textureType)
	ptrArguments[4] = gdnative.NewPointerFromInt(dataType)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CameraFeed", "_allocate_texture")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false rgb_img Image}], Returns: void
*/
func (o *CameraFeed) X_SetRgbImg(rgbImg ImageImplementer) {
	//log.Println("Calling CameraFeed.X_SetRgbImg()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(rgbImg.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CameraFeed", "_set_RGB_img")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false ycbcr_img Image}], Returns: void
*/
func (o *CameraFeed) X_SetYCbCrImg(ycbcrImg ImageImplementer) {
	//log.Println("Calling CameraFeed.X_SetYCbCrImg()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(ycbcrImg.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CameraFeed", "_set_YCbCr_img")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false y_img Image} { false cbcr_img Image}], Returns: void
*/
func (o *CameraFeed) X_SetYCbCrImgs(yImg ImageImplementer, cbcrImg ImageImplementer) {
	//log.Println("Calling CameraFeed.X_SetYCbCrImgs()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromObject(yImg.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromObject(cbcrImg.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CameraFeed", "_set_YCbCr_imgs")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false name String}], Returns: void
*/
func (o *CameraFeed) X_SetName(name gdnative.String) {
	//log.Println("Calling CameraFeed.X_SetName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CameraFeed", "_set_name")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false position int}], Returns: void
*/
func (o *CameraFeed) X_SetPosition(position gdnative.Int) {
	//log.Println("Calling CameraFeed.X_SetPosition()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(position)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CameraFeed", "_set_position")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *CameraFeed) GetId() gdnative.Int {
	//log.Println("Calling CameraFeed.GetId()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CameraFeed", "get_id")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: String
*/
func (o *CameraFeed) GetName() gdnative.String {
	//log.Println("Calling CameraFeed.GetName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CameraFeed", "get_name")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: enum.CameraFeed::FeedPosition
*/
func (o *CameraFeed) GetPosition() CameraFeedFeedPosition {
	//log.Println("Calling CameraFeed.GetPosition()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CameraFeed", "get_position")

	// Call the parent method.
	// enum.CameraFeed::FeedPosition
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return CameraFeedFeedPosition(ret)
}

/*
        Undocumented
	Args: [], Returns: Transform2D
*/
func (o *CameraFeed) GetTransform() gdnative.Transform2D {
	//log.Println("Calling CameraFeed.GetTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CameraFeed", "get_transform")

	// Call the parent method.
	// Transform2D
	retPtr := gdnative.NewEmptyTransform2D()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransform2DFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *CameraFeed) IsActive() gdnative.Bool {
	//log.Println("Calling CameraFeed.IsActive()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CameraFeed", "is_active")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false active bool}], Returns: void
*/
func (o *CameraFeed) SetActive(active gdnative.Bool) {
	//log.Println("Calling CameraFeed.SetActive()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(active)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CameraFeed", "set_active")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false transform Transform2D}], Returns: void
*/
func (o *CameraFeed) SetTransform(transform gdnative.Transform2D) {
	//log.Println("Calling CameraFeed.SetTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromTransform2D(transform)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CameraFeed", "set_transform")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// CameraFeedImplementer is an interface that implements the methods
// of the CameraFeed class.
type CameraFeedImplementer interface {
	ReferenceImplementer
	X_AllocateTexture(width gdnative.Int, height gdnative.Int, format gdnative.Int, textureType gdnative.Int, dataType gdnative.Int)
	X_SetRgbImg(rgbImg ImageImplementer)
	X_SetYCbCrImg(ycbcrImg ImageImplementer)
	X_SetYCbCrImgs(yImg ImageImplementer, cbcrImg ImageImplementer)
	X_SetName(name gdnative.String)
	X_SetPosition(position gdnative.Int)
	GetId() gdnative.Int
	GetName() gdnative.String
	GetTransform() gdnative.Transform2D
	IsActive() gdnative.Bool
	SetActive(active gdnative.Bool)
	SetTransform(transform gdnative.Transform2D)
}
