package godot

import (
	"github.com/gabstv/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// CameraServerFeedImage is an enum for FeedImage values.
type CameraServerFeedImage int

const (
	CameraServerFeedCbcrImage  CameraServerFeedImage = 1
	CameraServerFeedRgbaImage  CameraServerFeedImage = 0
	CameraServerFeedYcbcrImage CameraServerFeedImage = 0
	CameraServerFeedYImage     CameraServerFeedImage = 0
)

//func NewcameraServerFromPointer(ptr gdnative.Pointer) cameraServer {
func newCameraServerFromPointer(ptr gdnative.Pointer) cameraServer {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := cameraServer{}
	obj.SetBaseObject(owner)

	return obj
}

func newSingletonCameraServer() *cameraServer {
	return &cameraServer{}
}

/*
   The [CameraServer] keeps track of different cameras accessible in Godot. These are external cameras such as webcams or the cameras on your phone. It is notably used to provide AR modules with a video feed from the camera. [b]Note:[/b] This class is currently only implemented on macOS and iOS. On other platforms, no [CameraFeed]s will be available.
*/
var CameraServer = newSingletonCameraServer()

/*
The [CameraServer] keeps track of different cameras accessible in Godot. These are external cameras such as webcams or the cameras on your phone. It is notably used to provide AR modules with a video feed from the camera. [b]Note:[/b] This class is currently only implemented on macOS and iOS. On other platforms, no [CameraFeed]s will be available.
*/
type cameraServer struct {
	Object
	owner       gdnative.Object
	initialized bool
}

// EnsureSingleton will check to see if we have an object for it. If not, it will fetch its
// GDNative object and set it.
func (o *cameraServer) ensureSingleton() {
	if o.initialized == true {
		return
	}
	//log.Println("Singleton not found. Fetching from GDNative...")
	base := gdnative.GetSingleton("CameraServer")
	o.SetBaseObject(base)
	o.initialized = true
}

func (o *cameraServer) BaseClass() string {
	return "CameraServer"
}

/*
        Adds the camera [code]feed[/code] to the camera server.
	Args: [{ false feed CameraFeed}], Returns: void
*/
func (o *cameraServer) AddFeed(feed CameraFeedImplementer) {
	o.ensureSingleton()
	//log.Println("Calling CameraServer.AddFeed()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(feed.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CameraServer", "add_feed")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Returns an array of [CameraFeed]s.
	Args: [], Returns: Array
*/
func (o *cameraServer) Feeds() gdnative.Array {
	o.ensureSingleton()
	//log.Println("Calling CameraServer.Feeds()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CameraServer", "feeds")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*
        Returns the [CameraFeed] corresponding to the camera with the given [code]index[/code].
	Args: [{ false index int}], Returns: CameraFeed
*/
func (o *cameraServer) GetFeed(index gdnative.Int) CameraFeedImplementer {
	o.ensureSingleton()
	//log.Println("Calling CameraServer.GetFeed()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(index)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CameraServer", "get_feed")

	// Call the parent method.
	// CameraFeed
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newCameraFeedFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(CameraFeedImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "CameraFeed" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(CameraFeedImplementer)
	}

	return &ret
}

/*
        Returns the number of [CameraFeed]s registered.
	Args: [], Returns: int
*/
func (o *cameraServer) GetFeedCount() gdnative.Int {
	o.ensureSingleton()
	//log.Println("Calling CameraServer.GetFeedCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CameraServer", "get_feed_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Removes the specified camera [code]feed[/code].
	Args: [{ false feed CameraFeed}], Returns: void
*/
func (o *cameraServer) RemoveFeed(feed CameraFeedImplementer) {
	o.ensureSingleton()
	//log.Println("Calling CameraServer.RemoveFeed()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(feed.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CameraServer", "remove_feed")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// CameraServerImplementer is an interface that implements the methods
// of the CameraServer class.
type CameraServerImplementer interface {
	ObjectImplementer
	AddFeed(feed CameraFeedImplementer)
	Feeds() gdnative.Array
	GetFeed(index gdnative.Int) CameraFeedImplementer
	GetFeedCount() gdnative.Int
	RemoveFeed(feed CameraFeedImplementer)
}
