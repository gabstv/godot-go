package godot

import (
	"github.com/gabstv/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewARVRControllerFromPointer(ptr gdnative.Pointer) ARVRController {
func newARVRControllerFromPointer(ptr gdnative.Pointer) ARVRController {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := ARVRController{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Undocumented
*/
type ARVRController struct {
	Spatial
	owner gdnative.Object
}

func (o *ARVRController) BaseClass() string {
	return "ARVRController"
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *ARVRController) GetControllerId() gdnative.Int {
	//log.Println("Calling ARVRController.GetControllerId()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRController", "get_controller_id")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: String
*/
func (o *ARVRController) GetControllerName() gdnative.String {
	//log.Println("Calling ARVRController.GetControllerName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRController", "get_controller_name")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: enum.ARVRPositionalTracker::TrackerHand
*/
func (o *ARVRController) GetHand() ARVRPositionalTrackerTrackerHand {
	//log.Println("Calling ARVRController.GetHand()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRController", "get_hand")

	// Call the parent method.
	// enum.ARVRPositionalTracker::TrackerHand
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ARVRPositionalTrackerTrackerHand(ret)
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *ARVRController) GetIsActive() gdnative.Bool {
	//log.Println("Calling ARVRController.GetIsActive()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRController", "get_is_active")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false axis int}], Returns: float
*/
func (o *ARVRController) GetJoystickAxis(axis gdnative.Int) gdnative.Real {
	//log.Println("Calling ARVRController.GetJoystickAxis()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(axis)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRController", "get_joystick_axis")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *ARVRController) GetJoystickId() gdnative.Int {
	//log.Println("Calling ARVRController.GetJoystickId()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRController", "get_joystick_id")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: Mesh
*/
func (o *ARVRController) GetMesh() MeshImplementer {
	//log.Println("Calling ARVRController.GetMesh()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRController", "get_mesh")

	// Call the parent method.
	// Mesh
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newMeshFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(MeshImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Mesh" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(MeshImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *ARVRController) GetRumble() gdnative.Real {
	//log.Println("Calling ARVRController.GetRumble()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRController", "get_rumble")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false button int}], Returns: int
*/
func (o *ARVRController) IsButtonPressed(button gdnative.Int) gdnative.Int {
	//log.Println("Calling ARVRController.IsButtonPressed()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(button)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRController", "is_button_pressed")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false controller_id int}], Returns: void
*/
func (o *ARVRController) SetControllerId(controllerId gdnative.Int) {
	//log.Println("Calling ARVRController.SetControllerId()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(controllerId)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRController", "set_controller_id")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false rumble float}], Returns: void
*/
func (o *ARVRController) SetRumble(rumble gdnative.Real) {
	//log.Println("Calling ARVRController.SetRumble()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(rumble)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRController", "set_rumble")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// ARVRControllerImplementer is an interface that implements the methods
// of the ARVRController class.
type ARVRControllerImplementer interface {
	SpatialImplementer
	GetControllerId() gdnative.Int
	GetControllerName() gdnative.String
	GetIsActive() gdnative.Bool
	GetJoystickAxis(axis gdnative.Int) gdnative.Real
	GetJoystickId() gdnative.Int
	GetMesh() MeshImplementer
	GetRumble() gdnative.Real
	IsButtonPressed(button gdnative.Int) gdnative.Int
	SetControllerId(controllerId gdnative.Int)
	SetRumble(rumble gdnative.Real)
}
