package gdnative

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "types.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
#cgo CFLAGS: -I../cgodeps/godot-cpp/godot_headers
#include "gdnative.gen.h"
// #include <cgodeps/godot-cpp/godot_headers/net/godot_webrtc.h>
// Include all headers for now. TODO: Look up all the required
// headers we need to import based on the method arguments and return types.
#include <gdnative/aabb.h>
#include <gdnative/array.h>
#include <gdnative/basis.h>
#include <gdnative/color.h>
#include <gdnative/dictionary.h>
#include <gdnative/gdnative.h>
#include <gdnative/node_path.h>
#include <gdnative/plane.h>
#include <gdnative/pool_arrays.h>
#include <gdnative/quat.h>
#include <gdnative/rect2.h>
#include <gdnative/rid.h>
#include <gdnative/string.h>
#include <gdnative/string_name.h>
#include <gdnative/transform.h>
#include <gdnative/transform2d.h>
#include <gdnative/variant.h>
#include <gdnative/vector2.h>
#include <gdnative/vector3.h>
#include <gdnative_api_struct.gen.h>
*/
import "C"
import "unsafe"

// NewEmptyNetWebrtcLibrary will return a pointer to an empty
// initialized NetWebrtcLibrary. This is primarily used in
// conjunction with MethodBindPtrCall.
func NewEmptyNetWebrtcLibrary() Pointer {
	var obj C.godot_net_webrtc_library
	return Pointer{base: unsafe.Pointer(&obj)}
}

// NewPointerFromNetWebrtcLibrary will return an unsafe pointer to the given
// object. This is primarily used in conjunction with MethodBindPtrCall.
func NewPointerFromNetWebrtcLibrary(obj NetWebrtcLibrary) Pointer {
	return Pointer{base: unsafe.Pointer(obj.getBase())}
}

// NewNetWebrtcLibraryFromPointer will return a NetWebrtcLibrary from the
// given unsafe pointer. This is primarily used in conjunction with MethodBindPtrCall.
func NewNetWebrtcLibraryFromPointer(ptr Pointer) NetWebrtcLibrary {

	return NetWebrtcLibrary{base: (*C.godot_net_webrtc_library)(ptr.getBase())}
}

type NetWebrtcLibrary struct {
	base *C.godot_net_webrtc_library

	Version GdnativeApiVersion
}

func (gdt NetWebrtcLibrary) getBase() *C.godot_net_webrtc_library {
	return gdt.base
}

// NewEmptyNetWebrtcPeerConnection will return a pointer to an empty
// initialized NetWebrtcPeerConnection. This is primarily used in
// conjunction with MethodBindPtrCall.
func NewEmptyNetWebrtcPeerConnection() Pointer {
	var obj C.godot_net_webrtc_peer_connection
	return Pointer{base: unsafe.Pointer(&obj)}
}

// NewPointerFromNetWebrtcPeerConnection will return an unsafe pointer to the given
// object. This is primarily used in conjunction with MethodBindPtrCall.
func NewPointerFromNetWebrtcPeerConnection(obj NetWebrtcPeerConnection) Pointer {
	return Pointer{base: unsafe.Pointer(obj.getBase())}
}

// NewNetWebrtcPeerConnectionFromPointer will return a NetWebrtcPeerConnection from the
// given unsafe pointer. This is primarily used in conjunction with MethodBindPtrCall.
func NewNetWebrtcPeerConnectionFromPointer(ptr Pointer) NetWebrtcPeerConnection {

	return NetWebrtcPeerConnection{base: (*C.godot_net_webrtc_peer_connection)(ptr.getBase())}
}

type NetWebrtcPeerConnection struct {
	base *C.godot_net_webrtc_peer_connection

	Version GdnativeApiVersion
}

func (gdt NetWebrtcPeerConnection) getBase() *C.godot_net_webrtc_peer_connection {
	return gdt.base
}

// NewEmptyNetWebrtcDataChannel will return a pointer to an empty
// initialized NetWebrtcDataChannel. This is primarily used in
// conjunction with MethodBindPtrCall.
func NewEmptyNetWebrtcDataChannel() Pointer {
	var obj C.godot_net_webrtc_data_channel
	return Pointer{base: unsafe.Pointer(&obj)}
}

// NewPointerFromNetWebrtcDataChannel will return an unsafe pointer to the given
// object. This is primarily used in conjunction with MethodBindPtrCall.
func NewPointerFromNetWebrtcDataChannel(obj NetWebrtcDataChannel) Pointer {
	return Pointer{base: unsafe.Pointer(obj.getBase())}
}

// NewNetWebrtcDataChannelFromPointer will return a NetWebrtcDataChannel from the
// given unsafe pointer. This is primarily used in conjunction with MethodBindPtrCall.
func NewNetWebrtcDataChannelFromPointer(ptr Pointer) NetWebrtcDataChannel {

	return NetWebrtcDataChannel{base: (*C.godot_net_webrtc_data_channel)(ptr.getBase())}
}

type NetWebrtcDataChannel struct {
	base *C.godot_net_webrtc_data_channel

	Version GdnativeApiVersion
}

func (gdt NetWebrtcDataChannel) getBase() *C.godot_net_webrtc_data_channel {
	return gdt.base
}
